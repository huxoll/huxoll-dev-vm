---
  - hosts: localhost
    connection: local
    become: no

    vars:
      apt_package_list:
        - wget
        - curl
        - gzip
        - pbzip2
        - unzip
        - vim
        - git
        - zip
        - sudo
      homebrew_package_list:
        - node
        - tmux
        - gnu-tar
        - go
        - kubectl
        - bash-completion
        - wget
        - watch
        - mas
      homebrew_cask_package_list:
# Interpreters:
        - java
# Plain text editors:
        - sublime-text
        - atom
# Browsers:
        # Already part of base image
        # - google-chrome
        - homebrew/cask-versions/firefox-developer-edition
        - tor-browser
# IDE:
        - visual-studio-code
# General Dev tools:
        - iterm2
        # Already part of base image
        # - slack
        - meld
        - docker
# Virtualization and remote access:
        - vagrant
        #- virtualbox VirtualBox is tricky on recent OSX
# Every now and then, have to edit an image
        - gimp
        - krita
# Misc:
        - evernote
        - vlc
# Some people still use Skype
        - skype

      homebrew_cask_antivirus: avast-security
      homebrew_cask_password_vault: 1password

      personal_bin: '{{ansible_env.HOME}}/bin'
      get_fonts: true
      docker: true
      ruby: true
      google_cloud: true
      workplace: 'Job'
      projects_dir: '{{ansible_env.HOME}}/Projects'
      projects_dir_personal: '{{projects_dir}}/Personal'
      projects_dir_work: '{{projects_dir}}/Work'

    tasks:
    - name: Install atom apt repo
      become: yes
      apt_repository:
        repo: ppa:webupd8team/atom
      when:
        - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
        - editor == 'atom'

    - name: Remove old Docker.io (if installed)
      become: yes
      apt: pkg=docker.io state=absent
      when: ansible_distribution_version == '14.04' and docker

    - name: Install docker apt repo key
      become: yes
      apt_key: keyserver=hkp://p80.pool.sks-keyservers.net:80 id=58118E89F3A912897C070ADBF76221572C52609D
      when: ansible_distribution_version == '14.04' and docker

    - name: Install docker apt repo
      become: yes
      apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' update_cache=yes
      when: ansible_distribution_version == '14.04' and docker

    - name: Install docker.io for Ubuntu 15+ vms
      become: yes
      apt: pkg=docker.io state=latest
      when: ansible_distribution_version >= '15.04' and docker

    - name: Install docker-engine for Ubuntu 14 vms
      become: yes
      apt: pkg=docker-engine state=latest
      when: ansible_distribution_version == '14.04' and docker

    - name: Install apt packages
      become: yes
      apt: pkg={{ apt_package_list }} state=present
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Install apt additional packages, if any
      apt: pkg={{ item }} state=present
      with_items: "{{additional_apt_packages}}"
      when:
        - ansible_distribution_version == '14.04'
        - additional_apt_packages is defined

    - name: Install atom via apt
      become: yes
      apt: pkg=atom state=present
      when:
        - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
        - editor == 'atom'

    - name: Check if homebrew is installed
      shell: brew list
      register: homebrew_installed
      when: ansible_distribution == "MacOSX"

    - name: Ensure homebrew is installed
      command: /usr/bin/ruby -e "curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install"
      when:
        - ansible_distribution == "MacOSX"
        - homebrew_installed is changed
        - homebrew_installed.rc != 0

    - name: Install homebrew packages
      homebrew: name={{ homebrew_package_list }} state=present
      when: ansible_distribution == "MacOSX"

    - name: Install homebrew additional packages, if any
      homebrew: name={{ item }} state=present
      with_items: "{{additional_homebrew_packages}}"
      when:
        - ansible_distribution == "MacOSX"
        - additional_homebrew_packages is defined

    - name: Install homebrew cask packages
      command: brew cask install {{ item }}
      with_items: "{{homebrew_cask_package_list}}"
      when: ansible_distribution == "MacOSX"

    - name: List homebrew casks installed
      command: brew cask list
      register: homebrew_casks
      when: ansible_distribution == "MacOSX"

    - name:  Install additional homebrew cask packages, if any
      command: brew cask install {{ item }}
      with_items: "{{additional_cask_packages}}"
      when:
        - ansible_distribution == "MacOSX"
        - additional_cask_packages is defined

    - name: Add antivirus as homebrew cask package
      command: brew cask install {{ homebrew_cask_antivirus }}
      when:
        - ansible_distribution == "MacOSX"
        - homebrew_cask_antivirus is defined
        - homebrew_cask_antivirus|length > 0

    # Check for password app (I usually download it manually beforehand)
    - name: Look for password app
      shell: ls /Applications/ | grep -i {{ homebrew_cask_password_vault }}
      register: password_app_exists
      when: ansible_distribution == "MacOSX"
      ignore_errors: yes

    - name: Add password vault as homebrew cask package
      command: brew cask install {{ homebrew_cask_password_vault }}
      when:
        - ansible_distribution == "MacOSX"
        - homebrew_cask_password_vault is defined
        - homebrew_cask_password_vault|length > 0
        - password_app_exists.changed and password_app_exists.rc != 0

    - name: Install Apple App Store apps, if any
      command: mas install {{ item }}
      with_items: "{{additional_cask_packages}}"
      when:
        - ansible_distribution == "MacOSX"
        - additional_cask_packages is defined

    - name: Install homebrew docker
      homebrew: name=docker state=present
      when: ansible_distribution == "MacOSX" and docker

    - name: Copy gitconfig file
      become: yes
      copy: src=files/gitconfig dest=/etc/gitconfig backup=yes

    - name: Start Docker service
      become: yes
      service: name=docker state=started
      when: ansible_distribution != "MacOSX" and docker

    - name: Add local bin folder for helper scripts
      file: path={{personal_bin}} state=directory

    - name: Copy xgrep
      copy: src={{ item }} dest={{ansible_env.HOME}}/bin/ mode=u=rwx
      with_fileglob:
      - files/*grep

    - name: Copy gup
      copy: src=files/gup dest={{ansible_env.HOME}}/bin/ mode=u=rwx

    - name: ensure .bashrc exists
      copy:
        content: "# startup file for bash shell"
        dest: "{{ansible_env.HOME}}/.bashrc"
        force: no
        mode: 0600

    - name: ensure .bashrc is loaded by .bash_profile
      copy:
        content: |
          # .bash_profile
          if [ -f ~/.bashrc ]; then
            source ~/.bashrc
          fi
        dest: "{{ansible_env.HOME}}/.bash_profile"
        force: no
        mode: 0600

    - name: Bash completion
      lineinfile:
        dest: "{{ansible_env.HOME}}/.bash_profile"
        regexp: "^.*. /usr/local/etc/bash_completion"
        line: "[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion"

    - name: ensure config.fish exists
      copy:
        content: "# startup file for fish shell"
        dest: "{{ansible_env.HOME}}/.config/fish/config.fish"
        force: no
        mode: 0600
      when: shell == "fish"

    - name: Make sure ~/bin is in PATH
      lineinfile: dest={{ansible_env.HOME}}/.bashrc regexp="^export PATH=.*{{personal_bin}}" line='export PATH={{personal_bin}}:$PATH'
      when: shell == "bash"

    - name: Make sure ~/bin is in PATH
      lineinfile: dest={{ansible_env.HOME}}/.config/fish/config.fish regexp="^set -x PATH .*{{personal_bin}}" line='set -x PATH {{personal_bin}} $PATH'
      when: shell == "fish"

    - name: Copy inputrc file
      copy: src=files/inputrc dest={{ansible_env.HOME}}/.inputrc

    - name: Install gitconfig for user from template.
      template: src=templates/gitconfig.j2 dest={{ansible_env.HOME}}/.gitconfig force=no

    - name: Passwordless sudo (it's a VM or dev box, relax)
      lineinfile:
        dest: "/etc/sudoers.d/{{ ansible_user_id }}"
        create: yes
        regexp: "^.*ALL=(ALL:ALL) NOPASSWD: ALL"
        line: "{{ ansible_user_id }}        ALL=(ALL:ALL) NOPASSWD: ALL"
        validate: 'visudo -cf %s'
      become: yes

    - name: tmux prettier configuration
      git:
        repo: 'https://github.com/gpakosz/.tmux.git'
        dest: "{{ansible_env.HOME}}/.tmux"

    - name: Copy tmux local customizations
      copy: src=files/tmux.conf.local dest={{ansible_env.HOME}}/.tmux.conf.local

    - name: Install apt packages for ruby
      become: yes
      package: name=ruby-full state=present
      when:
        - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
        - ruby

    - name: Check ruby version
      command: ruby -v
      when:
        - ansible_distribution == "MacOSX"

    - name: Install tmuxinator
      gem: name=tmuxinator state=present
      when: ruby

    - name: Download Powerline font for fancy terminal doodads
      block:
        - get_url:
            url: "https://github.com/powerline/fonts/blob/master/Hack/Hack-Regular.ttf?raw=true"
            dest: "{{ansible_env.HOME}}/Hack.ttf"
        - name: Install a font
          command: "open {{ansible_env.HOME}}/Hack.ttf"
        - name: Install a font guidance
          debug:
            msg: If you wish to use it, install the provided font into OSX and select in iTerm preferences.
      when:
        - ansible_distribution == "MacOSX"
        - get_fonts

    - name: Decorate prompt with git status (Linux)
      git:
        repo: 'https://github.com/magicmonty/bash-git-prompt.git'
        dest: "{{ansible_env.HOME}}/.bash-git-prompt"
        depth: 1
      when: ansible_distribution != "MacOSX"

    - name: Add gitprompt to bashrc
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bashrc"
        marker: "## {mark} Ansible gitprompt"
        content: |
          GIT_PROMPT_ONLY_IN_REPO=1
          source ~/.bash-git-prompt/gitprompt.sh
      when: ansible_distribution != "MacOSX"

    - name: Decorate prompt with git status (OSX)
      homebrew:
        name: bash-git-prompt
        state: present
      when: ansible_distribution == "MacOSX"

    - name: Add gitprompt to bashrc
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bashrc"
        marker: "## {mark} Ansible gitprompt"
        content: |
          if [ -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]; then
            GIT_PROMPT_ONLY_IN_REPO=1
            __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share
            source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
          fi
      when: ansible_distribution == "MacOSX"

    - name: Add useful aliases
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bash_profile"
        marker: "## {mark} Ansible aliases"
        content: |
          alias gpthis='git push origin HEAD:$(git_current_branch)'
          alias grb='git rebase -p'
          alias gm='git merge --no-ff'
          alias glog='git log --oneline --decorate'
          alias gup='git up'
      when: shell == "bash"

    - name: Add useful aliases
      blockinfile:
        dest: "{{ansible_env.HOME}}/.config/fish/config.fish"
        marker: "## {mark} Ansible aliases"
        content: |
          alias gpthis='git push origin HEAD:$(git_current_branch)'
          alias grb='git rebase -p'
          alias gm='git merge --no-ff'
          alias glog='git log --oneline --decorate'
          alias gup='git up'
      when: shell == "fish"

    - name: Add useful aliases (Linux)
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bash_profile"
        marker: "## {mark} Ansible aliases for linux"
        content: |
          alias psc='ps xawf -eo pid,user,cgroup,args'
      when:
        - ansible_distribution != "MacOSX"
        - shell == "bash"

    - name: Add useful aliases (Linux)
      blockinfile:
        dest: "{{ansible_env.HOME}}/.config/fish/config.fish"
        marker: "## {mark} Ansible aliases for linux"
        content: |
          alias psc='ps xawf -eo pid,user,cgroup,args'
      when:
        - ansible_distribution != "MacOSX"
        - shell == "fish"

    - name: Add z utility
      block:
        - get_url:
            url: "https://raw.github.com/rupa/z/master/z.sh"
            dest: "{{ansible_env.HOME}}/bin/z.sh"
            mode: u+x
        - name: Add z.sh to startup (bash)
          lineinfile: dest={{ansible_env.HOME}}/.bashrc regexp="^. {{personal_bin}}/z.sh" line='. {{personal_bin}}/z.sh'
          when: shell == "bash"

    - name: Get google cloud SDK
      block:
        - get_url:
            url: https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-197.0.0-darwin-x86_64.tar.gz
            dest: "{{ansible_env.HOME}}/google-cloud-sdk.tar.gz"
        - unarchive:
            src: "{{ansible_env.HOME}}/google-cloud-sdk.tar.gz"
            dest: "{{ansible_env.HOME}}"
        - command: "{{ansible_env.HOME}}/google-cloud-sdk/install.sh"
        - lineinfile:
            dest: "{{ansible_env.HOME}}/.bash_profile"
            regexp: "^source '{{ansible_env.HOME}}/google-cloud-sdk/path.bash.inc'"
            line: "source '{{ansible_env.HOME}}/google-cloud-sdk/path.bash.inc'"
        - lineinfile:
            dest: "{{ansible_env.HOME}}/.bash_profile"
            regexp: "^source '{{ansible_env.HOME}}/google-cloud-sdk/completion.bash.inc'"
            line: "source '{{ansible_env.HOME}}/google-cloud-sdk/completion.bash.inc'"
      when: google_cloud

    - name: Get google repo
      get_url:
        url: https://storage.googleapis.com/git-repo-downloads/repo
        dest: "{{ansible_env.HOME}}/bin/repo"
        mode: u+x

    - name: Get rmate utility as rsub
      get_url:
        url: "https://raw.github.com/aurora/rmate/master/rmate"
        dest: "{{ansible_env.HOME}}/bin/rsub"
        mode: u+x
      when:
        - ansible_distribution != "MacOSX"
        - editor is defined and editor == 'sublime'

    - name: Add Sublime remote editing alias
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bashrc"
        marker: "## {mark} Ansible aliases"
        content: |
          alias e="rsub"
      when:
        - ansible_distribution != "MacOSX"
        - editor is defined and editor == 'sublime'

    - name: Install pry shortcuts
      copy: src=files/pryrc dest={{ansible_env.HOME}}/.pryrc mode=u=rwx
      when: ruby

    - name: Install useful atom packages
      command: apm install {{ item }}
      with_items: "{{atom_packages}}"
      when:
        - atom_packages is defined
        - editor is defined and editor == 'atom'
