---
- hosts: localhost
  connection: local
  become: no

  environment:
    PATH: /usr/bin:/bin

  vars:
    apt_package_list:
      - wget
      - curl
      - gzip
      - pbzip2
      - unzip
      - vim
      - git
      - zip
      - sudo
    homebrew_package_list:
      - fd
      - node
      - tmux
      - gnu-tar
      - go
      - gpg
      - pinentry-mac
      - kubectl
      - bash-completion
      - wget
      - watch
      - mas
      - dos2unix
      - thefuck
    homebrew_cask_package_list:
      # Interpreters:
      # Not using - java
      # Not using - maven
      # Plain text editors:
      # Not using - sublime-text
      # Not using - atom
      # Browsers:
      # Already part of base image
      # - google-chrome
      - homebrew/cask-versions/firefox-developer-edition
      - tor-browser
      # IDE:
      - visual-studio-code
      # General Dev tools:
      - iterm2
      # Already part of base image
      # - slack
      - meld
      - docker
      # Virtualization and remote access:
      #- vagrant # maybe don't need vagrant anymore, doing more docker
      #- virtualbox VirtualBox is tricky on recent OSX
      # Every now and then, have to edit an image
      #- gimp # gimp is pretty tricky.
      - krita
      # Misc:
      - evernote
      - vlc
    # Some people still use Skype
    #- skype # removing skype, homebrew install seems flaky.

    # App store apps
    apple_appstore_package_list:
      - "1295203466" # Microsoft Remote Desktop

    homebrew_cask_antivirus: avast-security
    homebrew_cask_password_vault: 1password

    personal_bin: "{{ansible_env.HOME}}/bin"
    get_fonts: true
    docker: true
    ruby: true
    google_cloud: true
    projects_dir: "{{ansible_env.HOME}}/Projects"
    projects_dir_personal: "{{projects_dir}}/Personal"
    projects_dir_work: "{{projects_dir}}/Work"
    shell: bash

  tasks:
    - name: Install atom apt repo
      become: yes
      apt_repository:
        repo: ppa:webupd8team/atom
      when:
        - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
        - editor == 'atom'

    - name: Remove old Docker.io (if installed)
      become: yes
      apt: pkg=docker.io state=absent
      when: ansible_distribution_version == '14.04' and docker

    - name: Install docker apt repo key
      become: yes
      apt_key: keyserver=hkp://p80.pool.sks-keyservers.net:80 id=58118E89F3A912897C070ADBF76221572C52609D
      when: ansible_distribution_version == '14.04' and docker

    - name: Install docker apt repo
      become: yes
      apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' update_cache=yes
      when: ansible_distribution_version == '14.04' and docker

    - name: Install docker.io for Ubuntu 15+ vms
      become: yes
      apt: pkg=docker.io state=latest
      when: ansible_distribution_version >= '15.04' and docker

    - name: Install docker-engine for Ubuntu 14 vms
      become: yes
      apt: pkg=docker-engine state=latest
      when: ansible_distribution_version == '14.04' and docker

    - name: Install apt packages
      become: yes
      apt: pkg={{ apt_package_list }} state=present
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Install apt additional packages, if any
      apt: pkg={{ item }} state=present
      with_items: "{{additional_apt_packages}}"
      when:
        - ansible_distribution_version == '14.04'
        - additional_apt_packages is defined

    - name: Install atom via apt
      become: yes
      apt: pkg=atom state=present
      when:
        - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
        - editor == 'atom'

    - name: Install Visual Studio Code
      become: yes
      apt:
        deb: https://go.microsoft.com/fwlink/?LinkID=760868
      when:
        - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
        - editor == 'visual-studio-code'

    - name: Check if homebrew is installed
      shell: brew list
      register: homebrew_installed
      when: ansible_distribution == "MacOSX"

    - name: Ensure homebrew is installed
      command: /usr/bin/ruby -e "curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install"
      when:
        - ansible_distribution == "MacOSX"
        - homebrew_installed is changed
        - homebrew_installed.rc != 0

    - name: Brew doctor to check basics.
      command: brew doctor
      when:
        - ansible_distribution == "MacOSX"
      ignore_errors: yes

    - name: Install homebrew packages
      homebrew: name={{ homebrew_package_list }} state=present
      when: ansible_distribution == "MacOSX"

    - name: Install homebrew additional packages, if any
      homebrew: name={{ additional_homebrew_packages }} state=present
      when:
        - ansible_distribution == "MacOSX"
        - additional_homebrew_packages is defined

    - name: Install homebrew cask packages
      command: brew install --cask {{ item }}
      loop: "{{ homebrew_cask_package_list }}"
      when:
        - ansible_distribution == "MacOSX"

    - name: List homebrew casks installed
      command: brew cask list
      register: homebrew_casks
      when: ansible_distribution == "MacOSX"

    - name: Install additional homebrew cask packages, if any
      command: brew cask install {{ item }}
      loop: "{{ additional_cask_packages }}"
      when:
        - ansible_distribution == "MacOSX"
        - additional_cask_packages is defined

    - name: Add antivirus as homebrew cask package
      command: brew cask install {{ homebrew_cask_antivirus }}
      when:
        - ansible_distribution == "MacOSX"
        - homebrew_cask_antivirus is defined
        - homebrew_cask_antivirus|length > 0

    # Check for password app (I usually download it manually beforehand)
    - name: Look for password app
      shell: ls /Applications/ | grep -i {{ homebrew_cask_password_vault }}
      register: password_app_exists
      when: ansible_distribution == "MacOSX"
      ignore_errors: yes

    - name: Add password vault as homebrew cask package
      command: brew cask install {{ homebrew_cask_password_vault }}
      when:
        - ansible_distribution == "MacOSX"
        - homebrew_cask_password_vault is defined
        - homebrew_cask_password_vault|length > 0
        - password_app_exists.changed and password_app_exists.rc != 0

    - name: Sign in to Apple App Store apps
      command: mas signin {{ apple_id }} {{ apple_id_password }}
      register: mas_signin
      when:
        - ansible_distribution == "MacOSX"
        - apple_id is defined
        - apple_id|length > 0
        - apple_id_password is defined
        - apple_id_password|length > 0

    - name: Sign in to Apple App Store apps (no password)
      command: mas signin --dialog {{ apple_id }}
      when:
        - ansible_distribution == "MacOSX"
        - apple_id is defined
        - apple_id|length > 0
        - mas_signin is not changed

    - name: Install Apple App Store apps, if any
      command: mas install {{ item }}
      with_items: "{{apple_appstore_package_list}}"
      when:
        - ansible_distribution == "MacOSX"
        - apple_appstore_package_list is defined
        - apple_id is defined
        - apple_id|length > 0

    - name: Install homebrew docker
      homebrew: name=docker state=present
      when: ansible_distribution == "MacOSX" and docker

    - name: Copy gitconfig file
      become: yes
      copy: src=files/gitconfig dest=/etc/gitconfig backup=yes

    - name: Start Docker service
      become: yes
      service: name=docker state=started
      when: ansible_distribution != "MacOSX" and docker

    - name: Add local bin folder for helper scripts
      file: path={{personal_bin}} state=directory

    - name: Copy xgrep
      copy: src={{ item }} dest={{ansible_env.HOME}}/bin/ mode=u=rwx
      with_fileglob:
        - files/*grep

    - name: Copy gup
      copy: src=files/gup dest={{ansible_env.HOME}}/bin/ mode=u=rwx

    - name: ensure .bashrc exists
      copy:
        content: "# startup file for bash shell"
        dest: "{{ansible_env.HOME}}/.bashrc"
        force: no
        mode: 0600

    - name: ensure .bashrc is loaded by .bash_profile
      copy:
        content: |
          # .bash_profile
          if [ -f ~/.bashrc ]; then
            source ~/.bashrc
          fi
        dest: "{{ansible_env.HOME}}/.bash_profile"
        force: no
        mode: 0600

    - name: Bash completion
      lineinfile:
        dest: "{{ansible_env.HOME}}/.bash_profile"
        regexp: "^.*. /usr/local/etc/bash_completion"
        line: "[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion"

    - name: Install latest bash shell
      block:
        - name: Install bash from homebrew
          homebrew: name=bash state=present
        - name: Add new bash to list of shells
          become: yes
          lineinfile:
            path: /etc/shells
            regexp: "^/usr/local/bin/bash"
            line: /usr/local/bin/bash
        - name: Use new bash as shell
          command: chsh -s /usr/local/bin/bash
      when:
        - shell == "bash"
        - ansible_distribution == "MacOSX"

    - name: Install fish shell on MacOS
      homebrew: name=fish state=present
      when:
        - shell == "fish"
        - ansible_distribution == "MacOSX"

    - name: Install fish shell on Linux
      block:
        - name: Install fish apt repo
          become: yes
          apt_repository:
            repo: ppa:fish-shell/release-3
        - name: Install from apt repo
          become: yes
          apt: pkg=fish state=present
      when:
        - shell == "fish"
        - ansible_distribution == 'Ubuntu'

    - name: ensure config.fish exists
      block:
        - name: Ensures fish config dir exists
          file: path={{ansible_env.HOME}}/.config/fish state=directory
        - name: copy the file
          copy:
            content: "# startup file for fish shell"
            dest: "{{ansible_env.HOME}}/.config/fish/config.fish"
            force: no
            mode: 0600
      when: shell == "fish"

    - name: Add oh-my-fish
      block:
        - name: Get installer
          get_url:
            url: "https://get.oh-my.fish"
            dest: "{{ansible_env.HOME}}/fish_install"
            mode: u+x
        - name: Run oh-my-fish installer
          command: fish {{ansible_env.HOME}}/fish_install -y --noninteractive
      when:
        - shell == "fish"

    - name: Add oh-my-zsh
      block:
        - name: Get installer
          get_url:
            url: "https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
            dest: "{{ansible_env.HOME}}/ohmyzsh_install"
            mode: u+x
        - name: Run oh-my-zsh installer
          command: sh {{ansible_env.HOME}}/ohmyzsh_install -y --noninteractive
      when:
        - shell == "zsh"

    - name: Make sure ~/bin is in PATH
      lineinfile: dest={{ansible_env.HOME}}/.bashrc regexp="^export PATH=.*{{personal_bin}}" line='export PATH={{personal_bin}}:$PATH'
      when: shell == "bash"

    - name: Make sure ~/bin is in PATH
      lineinfile: dest={{ansible_env.HOME}}/.config/fish/config.fish regexp="^set -x PATH .*{{personal_bin}}" line='set -x PATH {{personal_bin}} $PATH'
      when: shell == "fish"

    - name: Add good old JDK8, since some projects use it
      block:
        - name: Add tap for AdoptOpenJDK
          command: brew tap adoptopenjdk/openjdk
        - name: Install Java environment chooser
          command: brew install jenv
        - name: Install JDK8
          command: brew cask install adoptopenjdk/openjdk/adoptopenjdk8
        - name: Add jenv to path
          lineinfile: dest={{ansible_env.HOME}}/.config/fish/config.fish regexp='^set -x PATH $HOME/.jenv/bin $PATH' line='set -x PATH $HOME/.jenv/bin $PATH'
          when: shell == "fish"
        - name: Load jenv on login
          lineinfile: dest={{ansible_env.HOME}}/.config/fish/config.fish regexp='^status --is-interactive; and source (jenv init -|psub)' line='status --is-interactive; and source (jenv init -|psub)'
          when: shell == "fish"
        - name: Add JDK8 as possible environment
          shell: export PATH=$PATH:{{ansible_env.HOME}}/.jenv/bin && eval "$(jenv init -)" && jenv add /usr/lib/jvm/java-8-openjdk-amd64
          args:
            executable: /bin/bash
        - name: Set JAVA_HOME
          lineinfile: dest={{ansible_env.HOME}}/.config/fish/config.fish regexp='^set -x JAVA_HOME /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home' line='set -x JAVA_HOME /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home'
          when: shell == "fish"
      when:
        - ansible_distribution == "MacOSX"
        - jdk8 is defined and jdk8

    - name: Add good old JDK8, since some projects use it (linux)
      block:
        - name: Install Java environment chooser
          command: git clone https://github.com/gcuisinier/jenv.git ~/.jenv
        - name: Install JDK8
          become: yes
          apt:
            pkg:
              - openjdk-8-jdk
              - openjdk-8-jre
        - name: Add jenv to path
          lineinfile: dest={{ansible_env.HOME}}/.config/fish/config.fish regexp='^set -x PATH $HOME/.jenv/bin $PATH' line='set -x PATH $HOME/.jenv/bin $PATH'
          when: shell == "fish"
        - name: Load jenv on login
          lineinfile: dest={{ansible_env.HOME}}/.config/fish/config.fish regexp='^status --is-interactive; and source (jenv init -|psub)' line='status --is-interactive; and source (jenv init -|psub)'
          when: shell == "fish"
        - name: Add JDK8 as possible environment
          shell: export PATH=$PATH:{{ansible_env.HOME}}/.jenv/bin && eval "$(jenv init -)" && jenv add /usr/lib/jvm/java-8-openjdk-amd64
          args:
            executable: /bin/bash
        - name: Set JAVA_HOME
          lineinfile: dest={{ansible_env.HOME}}/.config/fish/config.fish regexp='^set -x JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64' line='set -x JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64'
          when: shell == "fish"
      when:
        - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
        - jdk8 is defined and jdk8

    - name: Copy inputrc file
      copy: src=files/inputrc dest={{ansible_env.HOME}}/.inputrc

    - name: Install gitconfig for user from template.
      template: src=templates/gitconfig.j2 dest={{ansible_env.HOME}}/.gitconfig force=no

    - name: Passwordless sudo (it's a VM or dev box, relax)
      lineinfile:
        dest: "/etc/sudoers.d/{{ ansible_user_id }}"
        create: yes
        regexp: "^.*ALL=(ALL:ALL) NOPASSWD: ALL"
        line: "{{ ansible_user_id }}        ALL=(ALL:ALL) NOPASSWD: ALL"
        validate: "visudo -cf %s"
      become: yes

    - name: tmux prettier configuration
      git:
        repo: "https://github.com/gpakosz/.tmux.git"
        dest: "{{ansible_env.HOME}}/.tmux"

    - name: Copy tmux local customizations
      copy: src=files/tmux.conf.local dest={{ansible_env.HOME}}/.tmux.conf.local

    - name: Install apt packages for ruby
      become: yes
      package: name=ruby-full state=present
      when:
        - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
        - ruby

    - name: Check ruby version
      command: ruby -v
      when: ruby

    - name: Install tmuxinator
      gem: name=tmuxinator state=present
      when: ruby

    - name: Download Powerline font for fancy terminal doodads
      block:
        - name: Add homebrew cask for fonts
          command: brew tap homebrew/cask-fonts
        - name: Install the hack nerd font
          command: brew cask install font-hack-nerd-font
        # - name: Install the hack font
        #   command: brew cask install font-lekton-nerd-font
        # - name: Install the hack font
        #   command: brew cask install font-ubuntumono-nerd-font
      when:
        - ansible_distribution == "MacOSX"
        - get_fonts

    - name: Decorate prompt with git status (Linux)
      git:
        repo: "https://github.com/magicmonty/bash-git-prompt.git"
        dest: "{{ansible_env.HOME}}/.bash-git-prompt"
        depth: 1
      when: ansible_distribution != "MacOSX"

    - name: Add gitprompt to bashrc
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bashrc"
        marker: "## {mark} Ansible gitprompt"
        content: |
          GIT_PROMPT_ONLY_IN_REPO=1
          source ~/.bash-git-prompt/gitprompt.sh
      when:
        - ansible_distribution != "MacOSX"
        - shell == "bash"

    - name: Decorate prompt with git status (OSX)
      homebrew:
        name: bash-git-prompt
        state: present
      when:
        - ansible_distribution == "MacOSX"
        - shell == "bash"

    - name: Add gitprompt to bashrc
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bashrc"
        marker: "## {mark} Ansible gitprompt"
        content: |
          if [ -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]; then
            GIT_PROMPT_ONLY_IN_REPO=1
            __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share
            source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
          fi
      when:
        - ansible_distribution == "MacOSX"
        - shell == "bash"

    - name: Install Oh My Bash
      block:
        - get_url:
            url: "https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh"
            dest: "/tmp/install.sh"
            mode: u+x
        - name: Install Oh My Bash
          command: /bin/bash "/tmp/install.sh"
        - name: Choose Oh My Bash theme
          lineinfile:
            dest: "{{ansible_env.HOME}}/.bashrc"
            regexp: "^OSH_THEME="
            line: 'OSH_THEME="powerline"'
      when:
        - shell == "bash"

    - name: Add useful bash aliases
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bash_profile"
        marker: "## {mark} Ansible aliases"
        content: |
          alias gpthis='git push origin HEAD:$(git_current_branch)'
          alias grb='git rebase -p'
          alias gm='git merge --no-ff'
          alias glog='git log --oneline --decorate'
          alias gup='git up'
      when: shell == "bash"

    - name: Add useful bash aliases for editor
      lineinfile:
        path: "{{ansible_env.HOME}}/.bash_profile"
        regexp: "^alias e="
        line: alias e='code --goto '
      when:
        - shell == "bash"
        - editor is defined and editor == 'visual-studio-code'

    - name: Add useful bash variables for editor
      lineinfile:
        path: "{{ansible_env.HOME}}/.bashrc"
        regexp: "^export EDITOR="
        line: export EDITOR=code
      when:
        - shell == "bash"
        - editor is defined and editor == 'visual-studio-code'

    - name: Add useful fish aliases
      blockinfile:
        dest: "{{ansible_env.HOME}}/.config/fish/config.fish"
        marker: "## {mark} Ansible aliases"
        content: |
          alias gpthis='git push origin HEAD:(git_current_branch)'
          alias grb='git rebase -p'
          alias gm='git merge --no-ff'
          alias glog='git log --oneline --decorate'
          alias gup='git up'
          alias k='kubectl'
      when: shell == "fish"

    - name: Add useful bash aliases (Linux)
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bash_profile"
        marker: "## {mark} Ansible aliases for linux"
        content: |
          alias psc='ps xawf -eo pid,user,cgroup,args'
      when:
        - ansible_distribution != "MacOSX"
        - shell == "bash"

    - name: Add useful fish aliases (Linux)
      blockinfile:
        dest: "{{ansible_env.HOME}}/.config/fish/config.fish"
        marker: "## {mark} Ansible aliases for linux"
        content: |
          alias psc='ps xawf -eo pid,user,cgroup,args'
      when:
        - ansible_distribution != "MacOSX"
        - shell == "fish"

    - name: Install zshrc
      copy: src=files/zshrc dest={{ansible_env.HOME}}/.zshrc mode=u=rw
      when: shell == "zsh"

    - name: Add z utility
      block:
        - get_url:
            url: "https://raw.github.com/rupa/z/master/z.sh"
            dest: "{{ansible_env.HOME}}/bin/z.sh"
            mode: u+x
        - name: Add z.sh to startup (bash)
          lineinfile: dest={{ansible_env.HOME}}/.bashrc regexp="^. {{personal_bin}}/z.sh" line='. {{personal_bin}}/z.sh'
          when: shell == "bash"

    - name: Get google cloud SDK
      block:
        - get_url:
            url: https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-435.0.0-darwin-x86_64.tar.gz
            dest: "{{ansible_env.HOME}}/google-cloud-sdk.tar.gz"
        - unarchive:
            src: "{{ansible_env.HOME}}/google-cloud-sdk.tar.gz"
            dest: "{{ansible_env.HOME}}"
        - command: "{{ansible_env.HOME}}/google-cloud-sdk/install.sh"
        - lineinfile:
            dest: "{{ansible_env.HOME}}/.bash_profile"
            regexp: "^source '{{ansible_env.HOME}}/google-cloud-sdk/path.bash.inc'"
            line: "source '{{ansible_env.HOME}}/google-cloud-sdk/path.bash.inc'"
        - lineinfile:
            dest: "{{ansible_env.HOME}}/.bash_profile"
            regexp: "^source '{{ansible_env.HOME}}/google-cloud-sdk/completion.bash.inc'"
            line: "source '{{ansible_env.HOME}}/google-cloud-sdk/completion.bash.inc'"
      when:
        - google_cloud
        - not ansible_check_mode
        - ansible_distribution == "MacOSX"

    - name: Get google cloud SDK
      block:
        - get_url:
            url: https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-435.0.1-linux-x86_64.tar.gz
            dest: "{{ansible_env.HOME}}/google-cloud-sdk.tar.gz"
        - unarchive:
            src: "{{ansible_env.HOME}}/google-cloud-sdk.tar.gz"
            dest: "{{ansible_env.HOME}}"
        - command: "{{ansible_env.HOME}}/google-cloud-sdk/install.sh"
        - lineinfile:
            dest: "{{ansible_env.HOME}}/.bash_profile"
            regexp: "^source '{{ansible_env.HOME}}/google-cloud-sdk/path.bash.inc'"
            line: "source '{{ansible_env.HOME}}/google-cloud-sdk/path.bash.inc'"
        - lineinfile:
            dest: "{{ansible_env.HOME}}/.bash_profile"
            regexp: "^source '{{ansible_env.HOME}}/google-cloud-sdk/completion.bash.inc'"
            line: "source '{{ansible_env.HOME}}/google-cloud-sdk/completion.bash.inc'"
      when:
        - google_cloud
        - not ansible_check_mode
        - ansible_distribution != "MacOSX"

    - name: Get google repo
      get_url:
        url: https://storage.googleapis.com/git-repo-downloads/repo
        dest: "{{ansible_env.HOME}}/bin/repo"
        mode: u+x

    - name: Get rmate utility as rsub
      get_url:
        url: "https://raw.github.com/aurora/rmate/master/rmate"
        dest: "{{ansible_env.HOME}}/bin/rsub"
        mode: u+x
      when:
        - ansible_distribution != "MacOSX"
        - editor is defined and editor == 'sublime'

    - name: Add Sublime remote editing alias
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bashrc"
        marker: "## {mark} Ansible aliases"
        content: |
          alias e="rsub"
      when:
        - ansible_distribution != "MacOSX"
        - editor is defined and editor == 'sublime'

    - name: Install pry shortcuts
      copy: src=files/pryrc dest={{ansible_env.HOME}}/.pryrc mode=u=rwx
      when: ruby

    - name: Install useful atom packages
      command: apm install {{ item }}
      with_items: "{{atom_packages}}"
      when:
        - atom_packages is defined
        - editor is defined and editor == 'atom'

    - name: Install useful vscode packages
      command: code --install-extension {{ item }}
      with_items: "{{vscode_packages}}"
      when:
        - vscode_packages is defined
        - editor is defined and editor == 'visual-studio-code'
        - ansible_user_id != 'root'
