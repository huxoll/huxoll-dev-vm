---
  - hosts: localhost
    connection: local
    become: no

    vars:
      apt_package_list:
        - wget
        - curl
        - gzip
        - pbzip2
        - unzip
        - vim
        - git
        - zip
      homebrew_package_list:
        - node
        - tmux
      homebrew_cask_package_list:
        - sublime-text
        - atom

      personal_bin: '{{ansible_env.HOME}}/bin'

    tasks:
    - name: Remove old Docker.io
      become: yes
      apt: pkg=docker.io state=absent
      when: ansible_distribution_version == '14.04' and docker == true

    - name: Install docker apt repo key
      become: yes
      apt_key: keyserver=hkp://p80.pool.sks-keyservers.net:80 id=58118E89F3A912897C070ADBF76221572C52609D
      when: ansible_distribution_version == '14.04' and docker == true

    - name: Install docker apt repo
      become: yes
      apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' update_cache=yes
      when: ansible_distribution_version == '14.04' and docker == true

    - name: Install docker.io for Ubuntu 15,16 vms
      become: yes
      apt: pkg=docker.io state=latest
      when: ansible_distribution_version >= '15.04' and docker == true

    - name: Install docker-engine for Ubuntu 14 vms
      become: yes
      apt: pkg=docker-engine state=latest
      when: ansible_distribution_version == '14.04' and docker == true

    - name: Install apt packages
      become: yes
      apt: pkg={{ item }} state=present
      with_items: "{{apt_package_list}}"
      when: ansible_distribution_version == '14.04' and docker == true

    - name: Check if homebrew is installed
      shell: brew list
      register: homebrew_installed
      when: ansible_distribution == "MacOSX"

    - name: Ensure homebrew is installed
      command: /usr/bin/ruby -e "curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install"
      when: ansible_distribution == "MacOSX" and homebrew_installed.rc != 0

    - name: Install homebrew packages
      homebrew: name={{ item }} state=present
      with_items: "{{homebrew_package_list}}"
      when: ansible_distribution == "MacOSX"

    - name: Install homebrew cask packages
      command: brew cask install {{ item }}
      with_items: "{{homebrew_cask_package_list}}"
      when: ansible_distribution == "MacOSX"

    - name: Copy gitconfig file
      become: yes
      copy: src=files/gitconfig dest=/etc/gitconfig backup=yes

    - name: Start Docker service
      become: yes
      service: name=docker state=started
      when: docker == true

    - name: Add local bin folder for helper scripts
      file: path={{personal_bin}} state=directory

    - name: Copy xgrep
      copy: src={{ item }} dest={{ansible_env.HOME}}/bin/ mode=u=rwx
      with_fileglob:
      - files/*grep

    - name: Copy gup
      copy: src=files/gup dest={{ansible_env.HOME}}/bin/ mode=u=rwx

    - name: Make sure ~/bin is in PATH
      lineinfile: dest={{ansible_env.HOME}}/.bashrc regexp="^export PATH=.*{{personal_bin}}" line='export PATH={{personal_bin}}:$PATH'

    - name: Copy inputrc file
      copy: src=files/inputrc dest={{ansible_env.HOME}}/.inputrc

    - name: Install gitconfig for user from template.
      template: src=templates/gitconfig.j2 dest={{ansible_env.HOME}}/.gitconfig force=no

    - name: Passwordless sudo (it's a VM, relax)
      lineinfile:
        dest: "/etc/sudoers.d/{{ ansible_user_id }}"
        create: yes
        regexp: "^.*ALL=(ALL:ALL) NOPASSWD: ALL"
        line: "{{ ansible_user_id }}        ALL=(ALL:ALL) NOPASSWD: ALL"
        validate: 'visudo -cf %s'
      become: yes

    - name: tmux prettier configuration
      git:
        repo: 'https://github.com/gpakosz/.tmux.git'
        dest: "{{ansible_env.HOME}}/.tmux"

    - name: Copy tmux local customizations
      copy: src=files/tmux.conf.local dest={{ansible_env.HOME}}/.tmux.conf.local

    - name: Install tmuxinator
      gem: name=tmuxinator state=present
      when: ruby == true

    - name: Download Powerline font for fancy terminal doodads
      get_url:
        url: "https://github.com/powerline/fonts/blob/master/Hack/Hack-Regular.ttf"
        dest: "{{ansible_env.HOME}}/Hack-Regular.ttf"
      when: ansible_distribution == "MacOSX"

    - name: Install a font
      command: "open {{ansible_env.HOME}}/Hack-Regular.ttf"
      when: ansible_distribution == "MacOSX"

    - name: Install a font guidance
      debug:
        msg: If you wish to use it, install the provided font into OSX and select in iTerm preferences.
      when: ansible_distribution == "MacOSX"

    - name: Decorate prompt with git status (Linux)
      git:
        repo: 'https://github.com/magicmonty/bash-git-prompt.git'
        dest: "{{ansible_env.HOME}}/.bash-git-prompt"
        depth: 1
      when: ansible_distribution != "MacOSX"

    - name: Add gitprompt to bashrc
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bashrc"
        marker: "## {mark} Ansible gitprompt"
        content: |
          GIT_PROMPT_ONLY_IN_REPO=1
          source ~/.bash-git-prompt/gitprompt.sh
      when: ansible_distribution != "MacOSX"

    - name: Decorate prompt with git status (OSX)
      homebrew:
        name: bash-git-prompt
        state: present
      when: ansible_distribution == "MacOSX"

    - name: Add gitprompt to bashrc
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bashrc"
        marker: "## {mark} Ansible gitprompt"
        content: |
          if [ -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]; then
            GIT_PROMPT_ONLY_IN_REPO=1
            __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share
            source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
          fi
      when: ansible_distribution == "MacOSX"

    - name: Get rmate utility as rsub
      get_url:
        url: "https://raw.github.com/aurora/rmate/master/rmate"
        dest: "{{ansible_env.HOME}}/bin/rsub"
        mode: u+x
      when: ansible_distribution != "MacOSX"

    - name: Add Sublime remote editing alias
      blockinfile:
        dest: "{{ansible_env.HOME}}/.bashrc"
        marker: "## {mark} Ansible aliases"
        content: |
          alias e="rsub"
      when: ansible_distribution != "MacOSX"
