---
  - hosts: localhost
    connection: local
    sudo: no

    vars:
      apt_package_list:
        - wget
        - curl
        - gzip
        - pbzip2
        - unzip
        - network-manager-openconnect
        - vim
        - git
        - byobu

      personal_bin: '{{ansible_env.HOME}}/bin'

    tasks:
    - name: Remove old Docker.io
      sudo: yes
      apt: pkg=docker.io state=absent
      when: ansible_distribution_version == '14.04'

    - name: Install docker apt repo key
      sudo: yes
      apt_key: keyserver=hkp://p80.pool.sks-keyservers.net:80 id=58118E89F3A912897C070ADBF76221572C52609D
      when: ansible_distribution_version == '14.04'

    - name: Install docker apt repo
      sudo: yes
      apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' update_cache=yes
      when: ansible_distribution_version == '14.04'

    - name: Install docker.io for Ubuntu 15,16 vms
      sudo: yes
      apt: pkg=docker.io state=latest 
      when: ansible_distribution_version >= '15.04'

    - name: Install docker-engine for Ubuntu 14 vms
      sudo: yes
      apt: pkg=docker-engine state=latest 
      when: ansible_distribution_version == '14.04'

    - name: Install apt packages
      sudo: yes
      apt: pkg={{ item }} state=present 
      with_items: "{{apt_package_list}}"

    - name: Copy gitconfig file
      sudo: yes
      copy: src=files/gitconfig dest=/etc/gitconfig

    - name: Start Docker service
      sudo: yes
      service: name=docker state=started

    - name: Add local bin folder for helper scripts
      file: path={{personal_bin}} state=directory

    - name: Copy xgrep
      copy: src={{ item }} dest={{ansible_env.HOME}}/bin/ mode=u=rwx
      with_fileglob:
      - files/*grep

    - name: Make sure ~/bin is in PATH
      lineinfile: dest={{ansible_env.HOME}}/.bashrc regexp="^export PATH=.*{{personal_bin}}" line='export PATH={{personal_bin}}:$PATH'

    - name: Copy inputrc file
      copy: src=files/inputrc dest={{ansible_env.HOME}}/.inputrc

    - name: Install gitconfig for user from template.
      template: src=templates/gitconfig.j2 dest={{ansible_env.HOME}}/.gitconfig

    - name: Passwordless sudo (it's a VM, relax)
      lineinfile:
        dest: /etc/sudoers.d/me
        create: yes
        regexp: "{{ ansible_user_id }}        ALL=(ALL:ALL) NOPASSWD: ALL"
        line: "{{ ansible_user_id }}        ALL=(ALL:ALL) NOPASSWD: ALL"
      become: yes
